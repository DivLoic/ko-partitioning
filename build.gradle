plugins {
    id 'scala'
    id 'application'
    id 'com.google.cloud.tools.jib' version '1.7.0'
    id 'com.palantir.docker-compose' version '0.22.1'
}

sourceCompatibility = 1.8
mainClassName = "fr.xebia.ldi.crocodile.task.DataGeneration"

repositories {

    mavenCentral()
    maven { url = 'http://packages.confluent.io/maven/' }
}

dependencies {

    implementation group: 'org.scala-lang', name: 'scala-library', version: '2.13.1'
    implementation group: 'org.typelevel', name: 'cats-core_2.13', version: '2.1.0'


    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'com.github.pureconfig', name: 'pureconfig_2.13', version: '0.12.2'

    implementation group: 'org.apache.avro', name: 'avro', version: '1.9.1'
    implementation group: 'com.sksamuel.avro4s', name: 'avro4s-core_2.13', version: '3.0.4'

    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '2.4.0'
    implementation group: 'org.apache.kafka', name: 'kafka-streams-scala_2.13', version: '2.4.0'

    implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '5.3.2'
    implementation group: 'io.confluent', name: 'kafka-streams-avro-serde', version: '5.3.2'
    implementation group: 'io.confluent', name: 'monitoring-interceptors', version: '5.3.2'

    testRuntimeOnly group: 'org.scala-lang.modules', name: 'scala-xml_2.13', version: '1.2.0'
    testImplementation group: 'org.scalatest', name: 'scalatest_2.13', version: '3.0.8'

}

compileScala {
    scalaCompileOptions.additionalParameters = [
            '-encoding', 'utf8',
            '-feature',
            '-unchecked',
            '-deprecation',
            '-Xfatal-warnings',
            '-language:postfixOps',
            '-language:higherKinds',
            '-Xmacro-settings:materialize-derivations'
    ]
}

dockerCompose {
    dockerComposeFile "docker-compose.yml"
}

task topicCreation(type: JavaExec) {
    main = 'fr.xebia.ldi.crocodile.task.TopicCreation'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn = [dockerComposeUp]
}

task schemaCreation(type: JavaExec) {
    main = 'fr.xebia.ldi.crocodile.task.SchemaCreation'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn = [topicCreation]
}

run.dependsOn {
    [dockerComposeUp, topicCreation, schemaCreation]
}


task consume(type: Exec) {

}
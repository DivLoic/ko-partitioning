plugins {
    id 'scala'
    id 'application'
    id 'com.google.cloud.tools.jib' version '2.2.0'
    id 'com.palantir.docker-compose' version '0.25.0'
}

version = '0.1.0-SNAPSHOT'
group = 'fr.ps.eng.ldi.crocodile'

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = "fr.ps.eng.ldi.crocodile.StreamingApp"

repositories {

    mavenCentral()
    maven { url = 'http://packages.confluent.io/maven/' }
}

dependencies {

    implementation group: 'org.scala-lang', name: 'scala-library', version: '2.13.2'
    implementation group: 'org.typelevel', name: 'cats-core_2.13', version: '2.1.0'

    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'com.github.pureconfig', name: 'pureconfig_2.13', version: '0.12.2'

    implementation group: 'com.sksamuel.avro4s', name: 'avro4s-core_2.13', version: '3.0.9'

    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '2.5.0'
    implementation group: 'org.apache.kafka', name: 'kafka-streams-scala_2.13', version: '2.5.0'

    implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '5.5.0'
    implementation group: 'io.confluent', name: 'kafka-streams-avro-serde', version: '5.5.0'

    implementation group: 'org.scalacheck', name: 'scalacheck_2.13', version: '1.14.0'

    implementation group: 'com.typesafe.akka', name: 'akka-stream_2.13', version: '2.5.30'
    implementation group: 'com.typesafe.akka', name: 'akka-stream-kafka_2.13', version: '2.0.3'

    testImplementation group: 'org.scalactic', name: 'scalactic_2.13', version: '3.1.1'
    testImplementation group: 'org.scalatest', name: 'scalatest_2.13', version: '3.1.1'
    testImplementation group: 'org.apache.kafka', name: 'kafka-streams-test-utils', version: '2.5.0'

}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
            '-encoding', 'utf8',
            '-feature',
            '-unchecked',
            '-deprecation',
            '-Xfatal-warnings',
            '-language:postfixOps',
            '-language:higherKinds',
            '-Xmacro-settings:materialize-derivations'
    ]
}

jib.to.image "${project.name}:${project.version}"
jib.container.mainClass "${project.group}.task.DataGeneration"

dockerCompose.dockerComposeFile "docker-compose.yml"

task topicCreation(type: JavaExec) {
    main = 'fr.ps.eng.ldi.crocodile.task.TopicCreation'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn = [dockerComposeUp]
}

task schemaCreation(type: JavaExec) {
    main = 'fr.ps.eng.ldi.crocodile.task.SchemaCreation'
    classpath = sourceSets.main.runtimeClasspath
    dependsOn = [topicCreation]
}

task consumeAccounts(type: JavaExec) {
    main = 'fr.ps.eng.ldi.crocodile.task.consumer.AccountTable'
    classpath = sourceSets.main.runtimeClasspath
}

task consumeClicks(type: JavaExec) {
    main = 'fr.ps.eng.ldi.crocodile.task.consumer.ClickStream'
    classpath = sourceSets.main.runtimeClasspath
}

class CleanUpState extends DefaultTask {

    @TaskAction
    void clean() {
        new File("/tmp/kafka-streams/ACCOUNT-CONSUMER/").deleteDir()
        new File("/tmp/kafka-streams/CLICK-JOINER-APP/").deleteDir()
    }
}

task spec(type: JavaExec) {
    group = 'verification'
    dependsOn = [compileTestScala]
    main = 'org.scalatest.tools.Runner'
    description = 'Runs the scala tests.'
    classpath = sourceSets.test.runtimeClasspath
    args = ['-R', 'build/classes/scala/test', '-o']
}

tasks.register("cleanUpState", CleanUpState) {
    group = 'application'
    description = 'Remove locals Kafka Streams internal states'
}

test.dependsOn spec
run.dependsOn schemaCreation
dockerComposeUp.dependsOn jibDockerBuild
